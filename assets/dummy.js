eval("//# sourceURL=vendor/ember-cli/loader.js");

;eval("define(\"dummy/Ember CLI QUnit/tests/ember-cli-qunit/components/select-2.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-cli-qunit/components\');\n    test(\'ember-cli-qunit/components/select-2.js should pass jshint\', function() { \n      ok(true, \'ember-cli-qunit/components/select-2.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/Ember CLI QUnit/tests/ember-cli-qunit/components/select-2.jshint.js");

;eval("define(\"dummy/app\", \n  [\"ember\",\"ember/resolver\",\"ember/load-initializers\",\"dummy/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var Resolver = __dependency2__[\"default\"];\n    var loadInitializers = __dependency3__[\"default\"];\n    var config = __dependency4__[\"default\"];\n\n    Ember.MODEL_FACTORY_INJECTIONS = true;\n\n    var App = Ember.Application.extend({\n      modulePrefix: config.modulePrefix,\n      podModulePrefix: config.podModulePrefix,\n      Resolver: Resolver\n    });\n\n    loadInitializers(App, config.modulePrefix);\n\n    __exports__[\"default\"] = App;\n  });//# sourceURL=dummy/app.js");

;eval("define(\"dummy/components/highlight-code\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    var HighlightCodeComponent = Ember.Component.extend({\n      tagName: \"pre\",\n\n      languageClass: function() {\n        return \"language-\" + this.get(\"lang\");\n      }.property(\"lang\"),\n\n      didInsertElement: function() {\n        window.hljs.highlightBlock(this.$().get(0));\n      }\n    });\n\n    __exports__[\"default\"] = HighlightCodeComponent;\n  });//# sourceURL=dummy/components/highlight-code.js");

;eval("define(\"dummy/components/link-li\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    var LinkLiComponent = Ember.Component.extend({\n      tagName: \'li\',\n      classNameBindings: [\'active\'],\n      \n      active: function() {\n        return this.get(\'childViews\').anyBy(\'active\');\n      }.property(\'childViews.@each.active\')\n    });\n\n    __exports__[\"default\"] = LinkLiComponent;\n  });//# sourceURL=dummy/components/link-li.js");

;eval("define(\"dummy/components/select-2\", \n  [\"ember-select-2/components/select-2\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    /*\n    	This is just a proxy file requiring the component from the /addon folder and\n    	making it available to the dummy application!\n     */\n    var Select2Component = __dependency1__[\"default\"];\n     \n    __exports__[\"default\"] = Select2Component;\n  });//# sourceURL=dummy/components/select-2.js");

;eval("define(\"dummy/controllers/examples\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    var ExamplesController = Ember.Controller.extend({\n      favouritePizza: null,\n      favouritePizzaId: Ember.computed.defaultTo(\'ham\'),\n      favouritePizzas: null,\n      favouritePizzaIds: null,\n      preselectedPizzaIds: [\"ham\", \"pep\", \"tex\"],\n      chosenIngredients: null,\n      enabled: true,\n\n      pizzas: Ember.A([\n        {\n          id: \"mar\",\n          text: \"Margherita\",\n          description: \"The original italian one\"\n        }, {\n          id: \"pep\",\n          text: \"Peperoni\",\n          description: \"For the Peperoni lovers\"\n        }, {\n          id: \"ham\",\n          text: \"Ham\",\n          description: \"Another well known classic\"\n        }, {\n          id: \"haw\",\n          text: \"Hawaii\",\n          description: \"For the exotic ones\"\n        }\n      ]),\n\n      morePizzas: [\n        {\n          id: \"cal\",\n          text: \"Calzone\",\n          description: \"Anyone know what that is?\"\n        }, {\n          id: \"bbq\",\n          text: \"Barbecue\",\n          description: \"Just lovely!\"\n        }\n      ],\n\n      evenMorePizzas: [\n        {\n          id: \"tex\",\n          text: \"Texas\",\n          description: \"Like Barbecue but with bullets\"\n        }, {\n          id: \"for\",\n          text: \"Quattro Formaggi\",\n          description: \"Cheese overload\"\n        }\n      ],\n\n      ingredients: [\n        {\n          text: \"Vegetables\",\n          children: [\n            {\n              id: \"tom\",\n              text: \"Tomatoes\"\n            }, {\n              id: \"pin\",\n              text: \"Pineapples\"\n            }\n          ]\n        }, {\n          text: \"Meat\",\n          children: [\n            {\n              id: \"sal\",\n              text: \"Salami\"\n            }, {\n              id: \"ham\",\n              text: \"Ham\"\n            }, {\n              id: \"bac\",\n              text: \"Bacon\"\n            }\n          ]\n        }\n      ],\n\n      actions: {\n        selectPizza: function(item) {\n          this.set(\"favouritePizza\", item);\n        },\n\n        loadPizzas: function() {\n          this.pizzas.pushObjects(this.morePizzas);\n          this.morePizzas = [];\n        },\n\n        loadMorePizzas: function() {\n          this.pizzas.pushObjects(this.evenMorePizzas);\n          this.evenMorePizzas = [];\n        },\n\n        toggleEnabled: function() {\n          this.toggleProperty(\'enabled\');\n        }\n      }\n    });\n\n    __exports__[\"default\"] = ExamplesController;\n  });//# sourceURL=dummy/controllers/examples.js");

;eval("define(\"dummy/ember-cli-content-security-policy/tests/ember-cli-content-security-policy/components/select-2.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-cli-content-security-policy/components\');\n    test(\'ember-cli-content-security-policy/components/select-2.js should pass jshint\', function() { \n      ok(true, \'ember-cli-content-security-policy/components/select-2.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/ember-cli-content-security-policy/tests/ember-cli-content-security-policy/components/select-2.jshint.js");

;eval("define(\"dummy/ember-data/tests/ember-data/components/select-2.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-data/components\');\n    test(\'ember-data/components/select-2.js should pass jshint\', function() { \n      ok(true, \'ember-data/components/select-2.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/ember-data/tests/ember-data/components/select-2.jshint.js");

;eval("define(\"dummy/ember-select-2/tests/ember-select-2/components/select-2.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-select-2/components\');\n    test(\'ember-select-2/components/select-2.js should pass jshint\', function() { \n      ok(true, \'ember-select-2/components/select-2.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/ember-select-2/tests/ember-select-2/components/select-2.jshint.js");

;eval("define(\"dummy/live-reload-middleware/tests/live-reload-middleware/components/select-2.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - live-reload-middleware/components\');\n    test(\'live-reload-middleware/components/select-2.js should pass jshint\', function() { \n      ok(true, \'live-reload-middleware/components/select-2.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/live-reload-middleware/tests/live-reload-middleware/components/select-2.jshint.js");

;eval("define(\"dummy/router\", \n  [\"ember\",\"dummy/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var config = __dependency2__[\"default\"];\n\n    var Router = Ember.Router.extend({\n      location: config.locationType\n    });\n\n    Router.map(function() {\n      this.route(\'examples\');\n      this.route(\'docs\');\n    });\n\n    __exports__[\"default\"] = Router;\n  });//# sourceURL=dummy/router.js");

;eval("define(\"dummy/templates/application\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var buffer = \'\', stack1, helper, options, self=this, helperMissing=helpers.helperMissing, functionType=\"function\", blockHelperMissing=helpers.blockHelperMissing;\n\n    function program1(depth0,data) {\n      \n      var buffer = \'\', stack1, helper, options;\n      data.buffer.push(\"\\n        	\");\n      stack1 = (helper = helpers[\'link-to\'] || (depth0 && depth0[\'link-to\']),options={hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(2, program2, data),contexts:[depth0],types:[\"STRING\"],data:data},helper ? helper.call(depth0, \"index\", options) : helperMissing.call(depth0, \"link-to\", \"index\", options));\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n        \");\n      return buffer;\n      }\n    function program2(depth0,data) {\n      \n      \n      data.buffer.push(\"Home\");\n      }\n\n    function program4(depth0,data) {\n      \n      var buffer = \'\', stack1, helper, options;\n      data.buffer.push(\"\\n          \");\n      stack1 = (helper = helpers[\'link-to\'] || (depth0 && depth0[\'link-to\']),options={hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(5, program5, data),contexts:[depth0],types:[\"STRING\"],data:data},helper ? helper.call(depth0, \"examples\", options) : helperMissing.call(depth0, \"link-to\", \"examples\", options));\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n        \");\n      return buffer;\n      }\n    function program5(depth0,data) {\n      \n      \n      data.buffer.push(\"Examples\");\n      }\n\n    function program7(depth0,data) {\n      \n      var buffer = \'\', stack1, helper, options;\n      data.buffer.push(\"\\n          \");\n      stack1 = (helper = helpers[\'link-to\'] || (depth0 && depth0[\'link-to\']),options={hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(8, program8, data),contexts:[depth0],types:[\"STRING\"],data:data},helper ? helper.call(depth0, \"docs\", options) : helperMissing.call(depth0, \"link-to\", \"docs\", options));\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n        \");\n      return buffer;\n      }\n    function program8(depth0,data) {\n      \n      \n      data.buffer.push(\"Docs\");\n      }\n\n      data.buffer.push(\"<div class=\\\"navbar navbar-default navbar-fixed-top\\\" role=\\\"navigation\\\">\\n  <div class=\\\"container\\\">\\n    <div class=\\\"navbar-header\\\">\\n      <button type=\\\"button\\\" class=\\\"navbar-toggle\\\" data-toggle=\\\"collapse\\\" data-target=\\\".navbar-collapse\\\">\\n        <span class=\\\"sr-only\\\">Toggle navigation</span>\\n        <span class=\\\"icon-bar\\\"></span>\\n        <span class=\\\"icon-bar\\\"></span>\\n        <span class=\\\"icon-bar\\\"></span>\\n      </button>\\n      <a class=\\\"navbar-brand\\\" href=\\\"#\\\">select-2 for ember.js</a>\\n    </div>\\n    <div class=\\\"navbar-collapse collapse\\\">\\n      <ul class=\\\"nav navbar-nav\\\">\\n        \");\n      options={hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[],types:[],data:data}\n      if (helper = helpers[\'link-li\']) { stack1 = helper.call(depth0, options); }\n      else { helper = (depth0 && depth0[\'link-li\']); stack1 = typeof helper === functionType ? helper.call(depth0, options) : helper; }\n      if (!helpers[\'link-li\']) { stack1 = blockHelperMissing.call(depth0, \'link-li\', {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[],types:[],data:data}); }\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n        \");\n      options={hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(4, program4, data),contexts:[],types:[],data:data}\n      if (helper = helpers[\'link-li\']) { stack1 = helper.call(depth0, options); }\n      else { helper = (depth0 && depth0[\'link-li\']); stack1 = typeof helper === functionType ? helper.call(depth0, options) : helper; }\n      if (!helpers[\'link-li\']) { stack1 = blockHelperMissing.call(depth0, \'link-li\', {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(4, program4, data),contexts:[],types:[],data:data}); }\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n        \");\n      options={hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(7, program7, data),contexts:[],types:[],data:data}\n      if (helper = helpers[\'link-li\']) { stack1 = helper.call(depth0, options); }\n      else { helper = (depth0 && depth0[\'link-li\']); stack1 = typeof helper === functionType ? helper.call(depth0, options) : helper; }\n      if (!helpers[\'link-li\']) { stack1 = blockHelperMissing.call(depth0, \'link-li\', {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(7, program7, data),contexts:[],types:[],data:data}); }\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n      </ul>\\n      <ul class=\\\"nav navbar-nav navbar-right\\\">\\n        <li><a href=\\\"https://github.com/istefo/ember-select-2\\\">Fork on Github.com</a></li>\\n      </ul>\\n    </div><!--/.nav-collapse -->\\n  </div>\\n</div>\\n<div class=\\\"container\\\">\\n	\");\n      stack1 = helpers._triageMustache.call(depth0, \"outlet\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n</div>\");\n      return buffer;\n      \n    });\n  });//# sourceURL=dummy/templates/application.js");

;eval("define(\"dummy/templates/components/highlight-code\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var buffer = \'\', stack1, escapeExpression=this.escapeExpression;\n\n\n      data.buffer.push(\"<code \");\n      data.buffer.push(escapeExpression(helpers[\'bind-attr\'].call(depth0, {hash:{\n        \'class\': (\"languageClass\")\n      },hashTypes:{\'class\': \"ID\"},hashContexts:{\'class\': depth0},contexts:[],types:[],data:data})));\n      data.buffer.push(\">\");\n      stack1 = helpers._triageMustache.call(depth0, \"yield\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"</code>\");\n      return buffer;\n      \n    });\n  });//# sourceURL=dummy/templates/components/highlight-code.js");

;eval("define(\"dummy/templates/docs\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      \n\n\n      data.buffer.push(\"<h4>Terminology</h4>\\n<p>To avoid confusion when reading the documentation, there is a short overview\\nof the term used.</p>\\n<dl class=\\\"dl-horizontal\\\">\\n  <dt>Content</dt>\\n  <dd>Array of elements that have to be supplied and will be displayed in the dropdown list</dd>\\n  <dt>Selection</dt>\\n  <dd>Subset of Content containing the elements that were selected by the user</dd>\\n</dl>\\n\\n<h3>Content</h3>\\n<h4>Flat Content</h4>\\n<p>The component\'s <code>content</code> property has to be set or bound to an Array (or subclass of Ember.Enumerable).<br/>Its elements are expected to have a specific set of properties each:</p>\\n<dl class=\\\"dl-horizontal\\\">\\n  <dt>id</dt>\\n  <dd>Mixed<br/>Used to internally identify an object and should be unique when coerced to a String</dd>\\n  <dt>text</dt>\\n  <dd>String | SafeString<br/>Can be a computed property. Text to be displayed in the dropdown menu. Escapes html entities by default except when already a Handlebars.SafeString.</dd>\\n  <dt>description</dt>\\n  <dd>String | SafeString<br/>Can be a computed property. Additional text to be displayed in the dropdown menu, visually less important. Will be omitted in the non-expanded view. Escapes html entities by default except when already a Handlebars.SafeString.</dd>\\n  <dt>locked</dt>\\n  <dd>Boolean<br/>Can be set to indicate that this item can not be removed from the selection once selected. <b>Note:</b> make sure to add the object to the <code>value</code> when setting this to true.</dd>\\n</dl>\\n<p>Additionally, content objects may contain any other properties, functions etc., they will be preserved in full object binding mode.</p>\\n\\n<h4>Nested Content</h4>\\n<p>Simulating the <code>select > optgroup</code> behaviour, it is possible to supply a nested datasource containing category headers.<br/>For first level items in <code>content</code>:</p>\\n<dl class=\\\"dl-horizontal\\\">\\n  <dt>id</dt>\\n  <dd>Not necessary, header elements cannot be selected</dd>\\n  <dt>children<dt>\\n  <dd>Array<br/>Containing elements that conform to the <i>Flat Content</i> specification</dd>\\n  <dt>description</dt>\\n  <dd>Not displayed, instead, the text will be printed in bold.</dd>\\n</dl>\\n\\n<h3>Selection</h3>\\n<p>Selecting an option from the dropdown will update the component\'s <code>value</code> binding.</p>\\n<h4>Full Object Binding</h4>\\n<p>Full Object Binding is the default way of binding the component\'s selection and will be used, when <code>optionValuePath</code> is not set. It ensures strict equality between the object selected and the object from the provided content.</p>\\n<p>Also, setting the external end of the binding will update the displayed selection of the component.</p>\\n\\n<h4>Value Binding</h4>\\n<p>There are situations where it\'s more convenient to only bind one property of the whole content objects. This can be accieved by setting the <code>optionValuePath</code>, this path will then be used to <code>Ember.get()</code> the desired value which then is the selected value.</p>\\n<p>This path will also be used to collect the complete objects when syncing the component with the external value, so it better be unique.</p>\\n<p>In value binding mode, there is a special feature important when lazy-loading data:<br/>Imagine there is already a selection <code>value</code>, but the <code>content</code> array does not yet contain all selected elements. As long as the selection can not be fullfilled, user interaction on the component is disabled in order to prevent the user from accidentally destroying the selection.</p>\\n\\n<h3>Styling</h3>\\n<p>select-2 does not interfere with the default styling of the Select2 Component and depends on the original stylesheet. It adds support for <a href=\\\"http://fk.github.io/select2-bootstrap-css/master.html\\\">Twitter Bootstrap styling</a> by adding the class <code>.form-control</code> when the corresponding stylesheets are loaded.</p>\");\n      \n    });\n  });//# sourceURL=dummy/templates/docs.js");

;eval("define(\"dummy/templates/examples\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var buffer = \'\', stack1, helper, options, escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing, self=this;\n\n    function program1(depth0,data) {\n      \n      \n      data.buffer.push(\"{{select-2\\n    content=pizzas\\n    value=favouritePizza\\n    placeholder=\\\"Choose your pizza\\\"\\n    allow-clear=true\\n}}\");\n      }\n\n    function program3(depth0,data) {\n      \n      \n      data.buffer.push(\"{{select-2\\n    content=pizzas\\n    value=favouritePizza\\n    optionValuePath=\\\"id\\\"\\n    placeholder=\\\"Choose your Pizza\\\"\\n}}\");\n      }\n\n    function program5(depth0,data) {\n      \n      \n      data.buffer.push(\"{{select-2\\n    content=pizzas\\n    value=favouritePizza\\n    multiple=true\\n    placeholder=\\\"Choose some Pizzas\\\"\\n}}\");\n      }\n\n    function program7(depth0,data) {\n      \n      \n      data.buffer.push(\"{{select-2\\n    content=pizzas\\n    value=favouritePizza\\n    multiple=true\\n    optionValuePath=\\\"id\\\"\\n    placeholder=\\\"Choose some Pizzas\\\"\\n}}\");\n      }\n\n    function program9(depth0,data) {\n      \n      var buffer = \'\', stack1;\n      data.buffer.push(\"<a \");\n      data.buffer.push(escapeExpression(helpers.action.call(depth0, \"selectPizza\", \"\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:[\"STRING\",\"ID\"],data:data})));\n      data.buffer.push(\">\");\n      stack1 = helpers._triageMustache.call(depth0, \"text\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"</a> \");\n      return buffer;\n      }\n\n    function program11(depth0,data) {\n      \n      var buffer = \'\', stack1;\n      stack1 = helpers._triageMustache.call(depth0, \"id\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\" \");\n      return buffer;\n      }\n\n    function program13(depth0,data) {\n      \n      \n      data.buffer.push(\"[\\n  {\\n    text: \\\"Vegetables\\\",\\n    children: [\\n      {\\n        id: \\\"tom\\\",\\n        text: \\\"Tomatoes\\\"\\n      }, {\\n        id: \\\"pin\\\",\\n        text: \\\"Pineapples\\\"\\n      }\\n    ]\\n  }, {\\n    text: \\\"Meat\\\",\\n    children: [\\n      {\\n        id: \\\"sal\\\",\\n        text: \\\"Salami\\\"\\n      }, {\\n        id: \\\"ham\\\",\\n        text: \\\"Ham\\\"\\n      }, {\\n        id: \\\"bac\\\",\\n        text: \\\"Bacon\\\"\\n      }\\n    ]\\n  }\\n]\");\n      }\n\n    function program15(depth0,data) {\n      \n      \n      data.buffer.push(\"{{select-2\\n    content=pizzas\\n    enabled=enabled\\n    placeholder=\\\"Choose some Pizzas\\\"\\n}}\");\n      }\n\n    function program17(depth0,data) {\n      \n      \n      data.buffer.push(\"{{select-2\\n    content=pizzas\\n    optionLabelPath=\\\"id\\\"\\n    optionDescriptionPath=\\\"text\\\"\\n    placeholder=\\\"Choose some Pizzas\\\"\\n}}\");\n      }\n\n      data.buffer.push(\"<h3>Single-Selection Dropdown</h3>\\n<p>This mode works mostly like the default <code>{{select}}</code> component which comes with ember.js right away. However, notice the nice styling and search field making it easy to find the right option.</p>\\n\\n<div class=\\\"row\\\">\\n  <div class=\\\"col-sm-6\\\">\\n    <h4>Selection with Full Object Binding</h4>\\n    <p>You may choose your favourite pizza now! It will be remembered as <code>favouritePizza</code> on the controller.</p>\\n    <div class=\\\"example-box\\\">\\n      <p>Your Pizza:<br/><b>Id</b>: \");\n      stack1 = helpers._triageMustache.call(depth0, \"favouritePizza.id\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"<br/><b>Name</b>: \");\n      stack1 = helpers._triageMustache.call(depth0, \"favouritePizza.text\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"<br/><b>Description</b>: \");\n      stack1 = helpers._triageMustache.call(depth0, \"favouritePizza.description\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"</p>\\n      \");\n      data.buffer.push(escapeExpression((helper = helpers[\'select-2\'] || (depth0 && depth0[\'select-2\']),options={hash:{\n        \'content\': (\"pizzas\"),\n        \'value\': (\"favouritePizza\"),\n        \'placeholder\': (\"Choose your Pizza\"),\n        \'allow-clear\': (true)\n      },hashTypes:{\'content\': \"ID\",\'value\': \"ID\",\'placeholder\': \"STRING\",\'allow-clear\': \"BOOLEAN\"},hashContexts:{\'content\': depth0,\'value\': depth0,\'placeholder\': depth0,\'allow-clear\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"select-2\", options))));\n      data.buffer.push(\"\\n    </div>\\n    \");\n      stack1 = (helper = helpers[\'highlight-code\'] || (depth0 && depth0[\'highlight-code\']),options={hash:{\n        \'lang\': (\".hbs\")\n      },hashTypes:{\'lang\': \"STRING\"},hashContexts:{\'lang\': depth0},inverse:self.noop,fn:self.program(1, program1, data),contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"highlight-code\", options));\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n    <p>Full Object Binding ensures strict equality between the selected object and the object from the <code>content</code> array.</p>\\n    <p>You can specify the <code>placeholder</code> option to display a placeholder.  By specifying the <code>allow-clear</code>\\n    option, you determine whether or not a clear button is displayed when the select box has a selection.</p>\\n  </div>\\n\\n  <div class=\\\"col-sm-6\\\">\\n    <h4>Selection with Value Binding</h4>\\n    <p>Again, choose your pizza. This time though, only the ID will be set to the value binding.<p>\\n    <div class=\\\"example-box\\\">\\n      <p>Your Pizza Id: \");\n      stack1 = helpers._triageMustache.call(depth0, \"favouritePizzaId\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"</p>\\n      \");\n      data.buffer.push(escapeExpression((helper = helpers[\'select-2\'] || (depth0 && depth0[\'select-2\']),options={hash:{\n        \'content\': (\"pizzas\"),\n        \'value\': (\"favouritePizzaId\"),\n        \'optionValuePath\': (\"id\"),\n        \'placeholder\': (\"Choose your Pizza\")\n      },hashTypes:{\'content\': \"ID\",\'value\': \"ID\",\'optionValuePath\': \"STRING\",\'placeholder\': \"STRING\"},hashContexts:{\'content\': depth0,\'value\': depth0,\'optionValuePath\': depth0,\'placeholder\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"select-2\", options))));\n      data.buffer.push(\"\\n    </div>\\n    \");\n      stack1 = (helper = helpers[\'highlight-code\'] || (depth0 && depth0[\'highlight-code\']),options={hash:{\n        \'lang\': (\".hbs\")\n      },hashTypes:{\'lang\': \"STRING\"},hashContexts:{\'lang\': depth0},inverse:self.noop,fn:self.program(3, program3, data),contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"highlight-code\", options));\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n    <p>Using the <code>optionValuePath</code> option, you can set the select-2 component into \\\"value mode\\\".</p>\\n    <p>You can specify any path that can be resolved for the input object (<code>\\\"id\\\"</code> is just a simple example) and its data type will be preserved.</p>\\n  </div>\\n</div>\\n<hr/>\\n\\n<h3>Multiple-Selection Dropdown</h3>\\n<p>Multiple Selections behave like tag inputs and provide a high level of comfort for selecting elements.</p>\\n\\n<div class=\\\"row\\\">\\n  <div class=\\\"col-sm-6\\\">\\n    <h4>Multiple Selection w/ Full Object Binding</h4>\\n    <p>In case you are really hungry or order pizza for you and your friends (yeah, sure...), you can choose multiple objects which will be stored in the <code>favouritePizzas</code> Array.</p>\\n    <div class=\\\"example-box\\\">\\n      <p>Your Pizzas are: \");\n      stack1 = helpers._triageMustache.call(depth0, \"favouritePizzas\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"</p>\\n      \");\n      data.buffer.push(escapeExpression((helper = helpers[\'select-2\'] || (depth0 && depth0[\'select-2\']),options={hash:{\n        \'content\': (\"pizzas\"),\n        \'value\': (\"favouritePizzas\"),\n        \'multiple\': (true),\n        \'placeholder\': (\"Choose some Pizzas\")\n      },hashTypes:{\'content\': \"ID\",\'value\': \"ID\",\'multiple\': \"BOOLEAN\",\'placeholder\': \"STRING\"},hashContexts:{\'content\': depth0,\'value\': depth0,\'multiple\': depth0,\'placeholder\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"select-2\", options))));\n      data.buffer.push(\"\\n    </div>\\n    \");\n      stack1 = (helper = helpers[\'highlight-code\'] || (depth0 && depth0[\'highlight-code\']),options={hash:{\n        \'lang\': (\".hbs\")\n      },hashTypes:{\'lang\': \"STRING\"},hashContexts:{\'lang\': depth0},inverse:self.noop,fn:self.program(5, program5, data),contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"highlight-code\", options));\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n    <p>As you can see, the full objects are stored on the controller.</p>\\n  </div>\\n\\n  <div class=\\\"col-sm-6\\\">\\n    <h4>Multiple Selection w/ Value Binding</h4>\\n    <p>Maybe you only need the pizza Ids. Specify a path in <code>optionValuePath</code> and your\'re good to go.</p>\\n    <div class=\\\"example-box\\\">\\n      <p>Your Pizza Ids: \");\n      stack1 = helpers._triageMustache.call(depth0, \"favouritePizzaIds\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"</p>\\n      \");\n      data.buffer.push(escapeExpression((helper = helpers[\'select-2\'] || (depth0 && depth0[\'select-2\']),options={hash:{\n        \'content\': (\"pizzas\"),\n        \'value\': (\"favouritePizzaIds\"),\n        \'multiple\': (true),\n        \'optionValuePath\': (\"id\"),\n        \'placeholder\': (\"Choose some Pizzas\")\n      },hashTypes:{\'content\': \"ID\",\'value\': \"ID\",\'multiple\': \"BOOLEAN\",\'optionValuePath\': \"STRING\",\'placeholder\': \"STRING\"},hashContexts:{\'content\': depth0,\'value\': depth0,\'multiple\': depth0,\'optionValuePath\': depth0,\'placeholder\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"select-2\", options))));\n      data.buffer.push(\"\\n    </div>\\n    \");\n      stack1 = (helper = helpers[\'highlight-code\'] || (depth0 && depth0[\'highlight-code\']),options={hash:{\n        \'lang\': (\".hbs\")\n      },hashTypes:{\'lang\': \"STRING\"},hashContexts:{\'lang\': depth0},inverse:self.noop,fn:self.program(7, program7, data),contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"highlight-code\", options));\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n  </div>\\n</div>\\n<hr/>\\n\\n<h3>Changing the Selection Value</h3>\\n<p>Since Ember has nice two-way data bindings, you can of course change the selected element from outside the select-2 input and it will update accordingly. These examples work with single and multiple selection, but only single selection is shown here for siplicity.</p>\\n\\n<div class=\\\"row\\\">\\n  <div class=\\\"col-sm-6\\\">\\n    <h4>Full Object Binding</h4>\\n    <p>Same example as above, but now you can manually set the selected Element from outside the input.</p>\\n    <div class=\\\"example-box example-box-full\\\">\\n      <p>Set Selection to: \");\n      stack1 = helpers.each.call(depth0, \"pizzas\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(9, program9, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"</p>\\n      \");\n      data.buffer.push(escapeExpression((helper = helpers[\'select-2\'] || (depth0 && depth0[\'select-2\']),options={hash:{\n        \'content\': (\"pizzas\"),\n        \'value\': (\"favouritePizza\"),\n        \'placeholder\': (\"Choose your Pizza\")\n      },hashTypes:{\'content\': \"ID\",\'value\': \"ID\",\'placeholder\': \"STRING\"},hashContexts:{\'content\': depth0,\'value\': depth0,\'placeholder\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"select-2\", options))));\n      data.buffer.push(\"\\n    </div>\\n  </div>\\n\\n  <div class=\\\"col-sm-6\\\">\\n    <h4>Value Binding</h4>\\n    <p>Naturally, this works as well for the Value Binding method. Try values like \\\"pep\\\", \\\"mar\\\" or \\\"haw\\\"!</p>\\n    <div class=\\\"example-box example-box-full\\\">\\n      \");\n      data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{\n        \'type\': (\"text\"),\n        \'value\': (\"favouritePizzaId\"),\n        \'class\': (\"form-control\")\n      },hashTypes:{\'type\': \"STRING\",\'value\': \"ID\",\'class\': \"STRING\"},hashContexts:{\'type\': depth0,\'value\': depth0,\'class\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"input\", options))));\n      data.buffer.push(\"<br/>\\n      \");\n      data.buffer.push(escapeExpression((helper = helpers[\'select-2\'] || (depth0 && depth0[\'select-2\']),options={hash:{\n        \'content\': (\"pizzas\"),\n        \'value\': (\"favouritePizzaId\"),\n        \'optionValuePath\': (\"id\"),\n        \'placeholder\': (\"Choose your Pizza\")\n      },hashTypes:{\'content\': \"ID\",\'value\': \"ID\",\'optionValuePath\': \"STRING\",\'placeholder\': \"STRING\"},hashContexts:{\'content\': depth0,\'value\': depth0,\'optionValuePath\': depth0,\'placeholder\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"select-2\", options))));\n      data.buffer.push(\"\\n      </div>\\n    <p>You will notice, that the dropdown gets locked when the entered ID does not match any of the objects available. This is a feature intended to prevent the destruction of the currently selected value when the options are yet to be loaded. (See the next example)</p>\\n  </div>\\n</div>\\n<hr />\\n\\n<h3>Changing the Dropdown Content</h3>\\n<p>The way Ember handles data is often asynchronous and the select-2 component can respond to changes in its <code>content</code> Array.</p>\\n<p>The following example will simulate lazy-loaded objects that were preselected using the <code>value</code> Binding but not available until the new data is loaded. Because the objects were selected but not available for display, the select-2 input is disabled so one can\'t change the selection without first knowing what data actually is selected!</p>\\n\\n<div class=\\\"row\\\">\\n  <div class=\\\"col-sm-6\\\">\\n    <h4>Full Object Binding</h4>\\n    <p>Changing the dropdown\'s content simply works as expected.</p>\\n    <div class=\\\"example-box example-box-full\\\">\\n      <p><button class=\\\"btn btn-default\\\" \");\n      data.buffer.push(escapeExpression(helpers.action.call(depth0, \"loadPizzas\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\n      data.buffer.push(\">Load more Pizzas</button></p>\\n      \");\n      data.buffer.push(escapeExpression((helper = helpers[\'select-2\'] || (depth0 && depth0[\'select-2\']),options={hash:{\n        \'content\': (\"pizzas\"),\n        \'value\': (\"favouritePizzas\"),\n        \'multiple\': (true),\n        \'placeholder\': (\"Choose some Pizzas\")\n      },hashTypes:{\'content\': \"ID\",\'value\': \"ID\",\'multiple\': \"BOOLEAN\",\'placeholder\': \"STRING\"},hashContexts:{\'content\': depth0,\'value\': depth0,\'multiple\': depth0,\'placeholder\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"select-2\", options))));\n      data.buffer.push(\"\\n    </div>\\n  </div>\\n  <div class=\\\"col-sm-6\\\">\\n    <h4>Value Binding</h4>\\n    <p>As you can see below, there is an Array of selected pizzas which contains keys that are not yet loaded into the main pizza Array. As soon as you load more pizzas, the input will become editable.<p>\\n    <div class=\\\"example-box example-box-full\\\">\\n      <p>Available: \");\n      stack1 = helpers.each.call(depth0, \"pizzas\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(11, program11, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"<br/>Selected: \");\n      stack1 = helpers._triageMustache.call(depth0, \"preselectedPizzaIds\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"</p>\\n      <p><button class=\\\"btn btn-default\\\" \");\n      data.buffer.push(escapeExpression(helpers.action.call(depth0, \"loadMorePizzas\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\n      data.buffer.push(\">Load even more Pizzas</button></p>\\n      \");\n      data.buffer.push(escapeExpression((helper = helpers[\'select-2\'] || (depth0 && depth0[\'select-2\']),options={hash:{\n        \'content\': (\"pizzas\"),\n        \'value\': (\"preselectedPizzaIds\"),\n        \'multiple\': (true),\n        \'optionValuePath\': (\"id\"),\n        \'placeholder\': (\"Choose some Pizzas\")\n      },hashTypes:{\'content\': \"ID\",\'value\': \"ID\",\'multiple\': \"BOOLEAN\",\'optionValuePath\': \"STRING\",\'placeholder\': \"STRING\"},hashContexts:{\'content\': depth0,\'value\': depth0,\'multiple\': depth0,\'optionValuePath\': depth0,\'placeholder\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"select-2\", options))));\n      data.buffer.push(\"\\n    </div>\\n  </div>\\n</div>\\n<hr/>\\n\\n<h3>Miscellaneous</h3>\\n<div class=\\\"row\\\">\\n  <div class=\\\"col-sm-6\\\">\\n    <h4>Hierarchical JSON</h4>\\n    <p>select2 works out of the box when given hierarchical JSON as input. Notice the <code>children</code> attribute.</p>\\n    <div class=\\\"example-box\\\">\\n      \");\n      data.buffer.push(escapeExpression((helper = helpers[\'select-2\'] || (depth0 && depth0[\'select-2\']),options={hash:{\n        \'content\': (\"ingredients\"),\n        \'value\': (\"selectedIngredients\"),\n        \'multiple\': (true),\n        \'placeholder\': (\"What would you like on your Pizza?\")\n      },hashTypes:{\'content\': \"ID\",\'value\': \"ID\",\'multiple\': \"BOOLEAN\",\'placeholder\': \"STRING\"},hashContexts:{\'content\': depth0,\'value\': depth0,\'multiple\': depth0,\'placeholder\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"select-2\", options))));\n      data.buffer.push(\"\\n    </div>\\n    \");\n      stack1 = (helper = helpers[\'highlight-code\'] || (depth0 && depth0[\'highlight-code\']),options={hash:{\n        \'lang\': (\"json\")\n      },hashTypes:{\'lang\': \"STRING\"},hashContexts:{\'lang\': depth0},inverse:self.noop,fn:self.program(13, program13, data),contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"highlight-code\", options));\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n  </div>\\n  <div class=\\\"col-sm-6\\\">\\n    <h4>Enabling/Disabling</h4>\\n    <p>By binding the component\'s <code>enabled</code> value, supply a truthy value to enable or a falsy value to disable the input.</p>\\n    <div class=\\\"example-box\\\">\\n      <p><button class=\\\"btn btn-default\\\" \");\n      data.buffer.push(escapeExpression(helpers.action.call(depth0, \"toggleEnabled\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\n      data.buffer.push(\">Toggle enabled</button> Enabled: \");\n      stack1 = helpers._triageMustache.call(depth0, \"enabled\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"</p>\\n      \");\n      data.buffer.push(escapeExpression((helper = helpers[\'select-2\'] || (depth0 && depth0[\'select-2\']),options={hash:{\n        \'content\': (\"pizzas\"),\n        \'enabled\': (\"enabled\"),\n        \'placeholder\': (\"Choose some Pizzas\")\n      },hashTypes:{\'content\': \"ID\",\'enabled\': \"ID\",\'placeholder\': \"STRING\"},hashContexts:{\'content\': depth0,\'enabled\': depth0,\'placeholder\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"select-2\", options))));\n      data.buffer.push(\"\\n    </div>\\n        \");\n      stack1 = (helper = helpers[\'highlight-code\'] || (depth0 && depth0[\'highlight-code\']),options={hash:{\n        \'lang\': (\".hbs\")\n      },hashTypes:{\'lang\': \"STRING\"},hashContexts:{\'lang\': depth0},inverse:self.noop,fn:self.program(15, program15, data),contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"highlight-code\", options));\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n  </div>\\n  <div class=\\\"col-sm-6\\\">\\n    <h4>Change Label Path</h4>\\n    <p>While by default the items\' <code>text</code> attribute is used for the text displayed, it can be customized by setting the components <code>optionLabelPath</code>.</p>\\n    <p>The <code>optionDescriptionPath</code> can be changed to something different from the default (<code>description</code>), too.</p>\\n    <div class=\\\"example-box\\\">\\n      \");\n      data.buffer.push(escapeExpression((helper = helpers[\'select-2\'] || (depth0 && depth0[\'select-2\']),options={hash:{\n        \'content\': (\"pizzas\"),\n        \'optionLabelPath\': (\"id\"),\n        \'optionDescriptionPath\': (\"text\"),\n        \'placeholder\': (\"Choose some Pizzas\")\n      },hashTypes:{\'content\': \"ID\",\'optionLabelPath\': \"STRING\",\'optionDescriptionPath\': \"STRING\",\'placeholder\': \"STRING\"},hashContexts:{\'content\': depth0,\'optionLabelPath\': depth0,\'optionDescriptionPath\': depth0,\'placeholder\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"select-2\", options))));\n      data.buffer.push(\"\\n    </div>\\n        \");\n      stack1 = (helper = helpers[\'highlight-code\'] || (depth0 && depth0[\'highlight-code\']),options={hash:{\n        \'lang\': (\".hbs\")\n      },hashTypes:{\'lang\': \"STRING\"},hashContexts:{\'lang\': depth0},inverse:self.noop,fn:self.program(17, program17, data),contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"highlight-code\", options));\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n  </div>\\n</div>\\n\");\n      return buffer;\n      \n    });\n  });//# sourceURL=dummy/templates/examples.js");

;eval("define(\"dummy/templates/index\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var buffer = \'\', stack1, helper, options, self=this, helperMissing=helpers.helperMissing;\n\n    function program1(depth0,data) {\n      \n      \n      data.buffer.push(\"View the examples »\");\n      }\n\n      data.buffer.push(\"<div class=\\\"jumbotron\\\">\\n	<h1 id=\'title\'>select2 for ember.js</h1>\\n	<p>The go-to component for rich dropdown menus that integrate nicely with Ember.js.</p>\\n	\");\n      stack1 = (helper = helpers[\'link-to\'] || (depth0 && depth0[\'link-to\']),options={hash:{\n        \'class\': (\"btn btn-primary btn-lg\")\n      },hashTypes:{\'class\': \"STRING\"},hashContexts:{\'class\': depth0},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:[\"STRING\"],data:data},helper ? helper.call(depth0, \"examples\", options) : helperMissing.call(depth0, \"link-to\", \"examples\", options));\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n</div>\\n<h3>What is this?</h3>\\n<p>This component wraps the wildly used <a href=\\\"http://ivaynberg.github.io/select2/\\\" target=\\\"blank\\\">Select2 jQuery Plugin</a> in an Ember.Component making it easy to use in your ember application.</p>\\n\\n<h3>Why is it good?</h3>\\n<ul>\\n	<li>It does not reinvent the wheel but leverages the power of the <a href=\\\"http://ivaynberg.github.io/select2/\\\" target=\\\"blank\\\">Select2 jQuery Plugin</a></li>\\n	<li>It is a nice citizen in the Ember.js Town, supporting value bindings on <code>content</code> and <code>value</code> properties</li>\\n	<li>It supports computed <code>text</code> and <code>description</code> properties on its option elements</li>\\n	<li>It prevents XSS attacks in case the options contain user-supplied values, but enables html content when fed <code>Handlebars.SafeString</code>s</li>\\n	<li>Source code is documented and extensively tested</li>\\n</ul>\");\n      return buffer;\n      \n    });\n  });//# sourceURL=dummy/templates/index.js");

;eval("define(\"dummy/tests/app.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - .\');\n    test(\'app.js should pass jshint\', function() { \n      ok(true, \'app.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/app.jshint.js");

;eval("define(\"dummy/tests/components/highlight-code.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - components\');\n    test(\'components/highlight-code.js should pass jshint\', function() { \n      ok(true, \'components/highlight-code.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/components/highlight-code.jshint.js");

;eval("define(\"dummy/tests/components/link-li.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - components\');\n    test(\'components/link-li.js should pass jshint\', function() { \n      ok(true, \'components/link-li.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/components/link-li.jshint.js");

;eval("define(\"dummy/tests/controllers/examples.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - controllers\');\n    test(\'controllers/examples.js should pass jshint\', function() { \n      ok(true, \'controllers/examples.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/controllers/examples.jshint.js");

;eval("define(\"dummy/tests/dummy/tests/helpers/resolver.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - dummy/tests/helpers\');\n    test(\'dummy/tests/helpers/resolver.js should pass jshint\', function() { \n      ok(true, \'dummy/tests/helpers/resolver.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/dummy/tests/helpers/resolver.jshint.js");

;eval("define(\"dummy/tests/dummy/tests/helpers/start-app.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - dummy/tests/helpers\');\n    test(\'dummy/tests/helpers/start-app.js should pass jshint\', function() { \n      ok(true, \'dummy/tests/helpers/start-app.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/dummy/tests/helpers/start-app.jshint.js");

;eval("define(\"dummy/tests/dummy/tests/test-helper.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - dummy/tests\');\n    test(\'dummy/tests/test-helper.js should pass jshint\', function() { \n      ok(true, \'dummy/tests/test-helper.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/dummy/tests/test-helper.jshint.js");

;eval("define(\"dummy/tests/dummy/tests/unit/components/select-2-test.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - dummy/tests/unit/components\');\n    test(\'dummy/tests/unit/components/select-2-test.js should pass jshint\', function() { \n      ok(true, \'dummy/tests/unit/components/select-2-test.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/dummy/tests/unit/components/select-2-test.jshint.js");

;eval("define(\"dummy/tests/helpers/resolver\", \n  [\"ember/resolver\",\"dummy/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Resolver = __dependency1__[\"default\"];\n    var config = __dependency2__[\"default\"];\n\n    var resolver = Resolver.create();\n\n    resolver.namespace = {\n      modulePrefix: config.modulePrefix,\n      podModulePrefix: config.podModulePrefix\n    };\n\n    __exports__[\"default\"] = resolver;\n  });//# sourceURL=dummy/tests/helpers/resolver.js");

;eval("define(\"dummy/tests/helpers/start-app\", \n  [\"ember\",\"dummy/app\",\"dummy/router\",\"dummy/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var Application = __dependency2__[\"default\"];\n    var Router = __dependency3__[\"default\"];\n    var config = __dependency4__[\"default\"];\n\n    __exports__[\"default\"] = function startApp(attrs) {\n      var App;\n\n      var attributes = Ember.merge({}, config.APP);\n      attributes = Ember.merge(attributes, attrs); // use defaults, but you can override;\n\n      Router.reopen({\n        location: \'none\'\n      });\n\n      Ember.run(function() {\n        App = Application.create(attributes);\n        App.setupForTesting();\n        App.injectTestHelpers();\n      });\n\n      App.reset(); // this shouldn\'t be needed, i want to be able to \"start an app at a specific URL\"\n\n      return App;\n    }\n  });//# sourceURL=dummy/tests/helpers/start-app.js");

;eval("define(\"dummy/tests/router.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - .\');\n    test(\'router.js should pass jshint\', function() { \n      ok(true, \'router.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/router.jshint.js");

;eval("define(\"dummy/tests/test-helper\", \n  [\"dummy/tests/helpers/resolver\",\"ember-qunit\"],\n  function(__dependency1__, __dependency2__) {\n    \"use strict\";\n    var resolver = __dependency1__[\"default\"];\n    var setResolver = __dependency2__.setResolver;\n\n    setResolver(resolver);\n\n    document.write(\'<div id=\"ember-testing-container\"><div id=\"ember-testing\"></div></div>\');\n\n    QUnit.config.urlConfig.push({ id: \'nocontainer\', label: \'Hide container\'});\n    var containerVisibility = QUnit.urlParams.nocontainer ? \'hidden\' : \'visible\';\n    document.getElementById(\'ember-testing-container\').style.visibility = containerVisibility;\n  });//# sourceURL=dummy/tests/test-helper.js");

;eval("define(\"dummy/tests/unit/components/select-2-test\", \n  [\"ember\",\"ember-data\",\"ember-qunit\",\"dummy/tests/helpers/start-app\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__) {\n    \"use strict\";\n    /* globals andThen */\n    var Ember = __dependency1__[\"default\"];\n    var DS = __dependency2__[\"default\"];\n    var test = __dependency3__.test;\n    var moduleFor = __dependency3__.moduleFor;\n    var moduleForComponent = __dependency3__.moduleForComponent;\n    var startApp = __dependency4__[\"default\"];\n\n    /*\n      Test Fixtures\n     */\n    var simpleContent = [\n     {\n       id: true,\n       text: \"Margherita\"\n     }, {\n       id: \"pep\",\n       text: \"Peperoni\"\n     }, {\n       id: 42,\n       text: \"Ham\"\n     }, {\n       id: \"haw\",\n       text: \"Hawaii\"\n     }\n    ];\n    var additionalContent = [\n      {\n        id: \"cal\",\n        text: \"Calzone\"\n      }, {\n        id: \"bbq\",\n        text: \"Barbecue\"\n      }\n    ];\n    var categorizedIngredients = [\n      {\n        text: \"Vegetables\",\n        children: [\n          {\n            id: \"tom\",\n            text: \"Tomatoes\"\n          }, {\n            id: \"pin\",\n            text: \"Pineapples\"\n          }\n        ]\n      }, {\n        text: \"Meat\",\n        children: [\n          {\n            id: \"sal\",\n            text: \"Salami\"\n          }, {\n            id: \"ham\",\n            text: \"Ham\"\n          }, {\n            id: \"bac\",\n            text: \"Bacon\"\n          }\n        ]\n      }\n    ];\n    var ingredients = [\n      {\n        id: 1,\n        name: \'Tomato\',\n        subtext: \'first\'\n      }, {\n        id: 2,\n        name: \'Peperoni\',\n        subtext: \'second\'\n      }, {\n        id: 3,\n        name: \'Ham\',\n        subtext: \'third\'\n      }, {\n        id: 4,\n        name: \'Chorizo\',\n        subtext: \'fourth\'\n      }\n    ];\n\n\n    var App, component;\n    moduleForComponent(\'select-2\', \'Select2Component\', {\n      setup: function() {\n        App = startApp();\n        // setup and append component to dom\n        component = this.subject();\n      },\n      teardown: function() {\n        Ember.run(App, \'destroy\');\n        Ember.run(component, \'destroy\');\n      }\n    });\n\n\n    test(\"it renders\", function() {\n      expect(2);\n\n      equal(component.state, \'preRender\');\n\n      // appends the component to the page\n      this.append();\n      equal(component.state, \'inDOM\');\n    });\n\n\n    test(\"it initializes select2 plugin\", function() {\n      expect(2);\n\n      // append the component to the DOM\n      this.append();\n\n      ok(component.$().data(\'select2\'), \"has select2 data attribute\");\n\n      ok($(\".select2-container\").length, \"inserts container into dom\");\n    });\n\n\n    test(\"it supports placeholder text\", function() {\n      var placeholder = \"unit testing rocks\";\n\n      component.set(\'placeholder\', placeholder);\n\n      this.append();\n\n      equal($(\'.select2-chosen\').text(), placeholder, \"has placeholder text\");\n    });\n\n\n    test(\"it shows options when opened\", function() {\n      expect(2);\n\n      this.append();\n\n      component.set(\'content\', simpleContent);\n\n      // open options by clicking on the element\n      click(\'.select2-choice\');\n\n      andThen(function() {\n        equal($(\'.select2-results li\').length, simpleContent.length, \"has correct options length\");\n        equal($(\'.select2-results li\').text(), simpleContent.getEach(\'text\').join(\'\'), \"display correct text\");\n      });\n    });\n\n\n    test(\"it sets value to selected object in single selection mode\", function() {\n      expect(4);\n\n      this.append();\n\n      component.set(\'content\', simpleContent);\n\n      // open options by clicking on the element\n      click(\'.select2-choice\');\n      // then select an option\n      click(\'.select2-results li:nth-child(3)\', \'body\');\n\n      andThen(function() {\n        strictEqual(component.get(\'value\'), simpleContent[2], \"selects correct item\");\n        equal($(\'.select2-chosen\').text(), simpleContent[2].text, \"has correct text\");\n\n        // select another option just to make sure\n        click(\'.select2-choice\');\n        click(\'.select2-results li:nth-child(1)\', \'body\');\n\n        andThen(function() {\n          strictEqual(component.get(\'value\'), simpleContent[0], \"selects correct item\");\n          equal($(\'.select2-chosen\').text(), simpleContent[0].text, \"has correct text\");\n        });\n      });\n    });\n\n    test(\"it supports the allowClear option\", function() {\n      expect(3);\n\n      component.set(\'placeholder\', \'Select a value\'); // placeholder is required for allowClear\n      component.set(\'allowClear\', true);\n\n      this.append();\n\n      component.set(\'content\', simpleContent);\n\n      // open options by clicking on the element\n      click(\'.select2-choice\');\n      // then select an option\n      click(\'.select2-results li:nth-child(3)\', \'body\');\n\n      andThen(function() {\n        strictEqual(component.get(\'value\'), simpleContent[2], \"selects correct item\");\n        equal($(\'.select2-chosen\').text(), simpleContent[2].text, \"has correct text\");\n\n        // Click the remove option x\n        click(\'.select2-search-choice-close:visible\');\n\n        andThen(function() {\n          strictEqual(component.get(\'value\'), null, \"unselects the selected item\");\n        });\n      });\n    });\n\n    test(\"it alerts if allowClear is set without a placeholder\", function() {\n      expect(1);\n\n      component.set(\'placeholder\', undefined);\n      component.set(\'allowClear\', true);\n\n      try {\n        this.append();\n      } catch (e) {\n        equal(e.message, \'Assertion Failed: To use allowClear, you have to specify a placeholder\', \'throws and error\');\n      }\n    });\n\n    test(\"it sets value to selected object\'s optionValuePath in single selection mode\", function() {\n      expect(4);\n\n      this.append();\n\n      component.set(\'content\', simpleContent);\n      component.set(\'optionValuePath\', \'id\');\n\n      // open options by clicking on the element\n      click(\'.select2-choice\');\n      // then select an option\n      click(\'.select2-results li:nth-child(3)\', \'body\');\n\n      andThen(function() {\n        strictEqual(component.get(\'value\'), simpleContent[2].id, \"selects correct item\");\n        equal($(\'.select2-chosen\').text(), simpleContent[2].text, \"has correct text\");\n\n        // select another option just to make sure\n        click(\'.select2-choice\');\n        click(\'.select2-results li:nth-child(1)\', \'body\');\n\n        andThen(function() {\n          strictEqual(component.get(\'value\'), simpleContent[0].id, \"selects correct item\");\n          equal($(\'.select2-chosen\').text(), simpleContent[0].text, \"has correct text\");\n        });\n      });\n    });\n\n\n    test(\"it reacts to external value change\", function() {\n      expect(2);\n\n      this.append();\n\n      component.set(\'content\', simpleContent);\n\n      equal($(\'.select2-chosen\').text(), \'\', \"has empty selection text on start\");\n\n      component.set(\'value\', simpleContent[1]);\n\n      equal($(\'.select2-chosen\').text(), simpleContent[1].text, \"has correct selection text after value change\");\n    });\n\n\n    test(\"it reacts to external value change with optionValuePath\", function() {\n      expect(2);\n\n      this.append();\n\n      component.set(\'content\', simpleContent);\n      component.set(\'optionValuePath\', \'id\');\n\n      equal($(\'.select2-chosen\').text(), \'\', \"has empty selection text on start\");\n\n      component.set(\'value\', simpleContent[1].id);\n\n      equal($(\'.select2-chosen\').text(), simpleContent[1].text, \"has correct selection text after value change\");\n    });\n\n\n    test(\"it sets value to array of selected objects in multiple selection mode\", function() {\n      expect(7);\n\n      component.set(\'multiple\', true);\n\n      this.append();\n\n      component.set(\'content\', simpleContent);\n\n      equal($(\'.select2-choices\').text().trim(), \'\', \"has empty selection text on start\");\n\n      // select an option after opening the dropdown\n      click(\'.select2-choices\');\n      click(\'.select2-results li:nth-child(3)\', \'body\');\n\n      andThen(function() {\n        deepEqual(component.get(\'value\'), [simpleContent[2]], \"has correct value\");\n        equal($(\'.select2-choices\').text().replace(/ /g, \'\'), simpleContent[2].text, \"displays correct text\");\n\n        // select another item\n        click(\'.select2-choices\');\n        click(\'.select2-results li:nth-child(1)\', \'body\');\n\n        andThen(function() {\n          deepEqual(component.get(\'value\'), [simpleContent[2], simpleContent[0]], \"has correct value\");\n          equal($(\'.select2-choices\').text().replace(/ /g, \'\'), simpleContent[2].text + simpleContent[0].text, \"displays correct text\");\n\n          // remove the first item again\n          click(\'.select2-search-choice:nth-child(1) .select2-search-choice-close\');\n\n          andThen(function() {\n            deepEqual(component.get(\'value\'), [simpleContent[0]], \"has correct value\");\n            equal($(\'.select2-choices\').text().replace(/ /g, \'\'), simpleContent[0].text, \"displays correct text\");\n          });\n        });\n      });\n    });\n\n\n    test(\"it sets value to array of selected objects\' optionValuePaths in multiple selection mode\", function() {\n      expect(7);\n\n      component.set(\'multiple\', true);\n\n      this.append();\n\n      component.set(\'content\', simpleContent);\n      component.set(\'optionValuePath\', \'id\');\n\n      equal($(\'.select2-choices\').text().trim(), \'\', \"has empty selection text on start\");\n\n      // select an option after opening the dropdown\n      click(\'.select2-choices\');\n      click(\'.select2-results li:nth-child(3)\', \'body\');\n\n      andThen(function() {\n        deepEqual(component.get(\'value\'), [simpleContent[2].id], \"has correct value\");\n        equal($(\'.select2-choices\').text().replace(/ /g, \'\'), simpleContent[2].text, \"displays correct text\");\n\n        // select another item\n        click(\'.select2-choices\');\n        click(\'.select2-results li:nth-child(1)\', \'body\');\n\n        andThen(function() {\n          deepEqual(component.get(\'value\'), [simpleContent[2].id, simpleContent[0].id], \"has correct value\");\n          equal($(\'.select2-choices\').text().replace(/ /g, \'\'), simpleContent[2].text + simpleContent[0].text, \"displays correct text\");\n\n          // remove the first item again\n          click(\'.select2-search-choice:nth-child(1) .select2-search-choice-close\');\n\n          andThen(function() {\n            deepEqual(component.get(\'value\'), [simpleContent[0].id], \"has correct value\");\n            equal($(\'.select2-choices\').text().replace(/ /g, \'\'), simpleContent[0].text, \"displays correct text\");\n          });\n        });\n      });\n    });\n\n\n    test(\"it reacts to changing the content array\", function() {\n      expect(4);\n\n      this.append();\n\n      var content = [];\n      content.pushObjects(simpleContent);\n\n      component.set(\'content\', content);\n\n      // select an option after opening the dropdown\n      click(\'.select2-choice\');\n\n      andThen(function() {\n        equal($(\'.select2-results li\').length, simpleContent.length, \"has correct options length\");\n        equal($(\'.select2-results li\').text(), simpleContent.getEach(\'text\').join(\'\'), \"display correct text\");\n\n        click(\'.select2-choice\');\n\n        content.pushObjects(additionalContent);\n\n        click(\'.select2-choice\');\n\n        andThen(function() {\n          equal($(\'.select2-results li\').length, simpleContent.length + additionalContent.length, \"has correct options length\");\n          equal($(\'.select2-results li\').text(), simpleContent.getEach(\'text\').join(\'\') + additionalContent.getEach(\'text\').join(\'\'), \"display correct text\");\n        });\n      });\n    });\n\n\n    test(\"it is disabled when its selection contains values not in the content array\", function() {\n      expect(2);\n\n      this.append();\n\n      var content = [];\n      content.pushObjects(simpleContent);\n\n      component.set(\'content\', content);\n      component.set(\'multiple\', true);\n      component.set(\'optionValuePath\', \'id\');\n      component.set(\'value\', [\'bbq\']);\n\n      ok($(\'.select2-container\').hasClass(\'select2-container-disabled\'), \"is disabled\");\n\n      content.pushObjects(additionalContent);\n\n      ok(!$(\'.select2-container\').hasClass(\'select2-container-disabled\'), \"is enabled\");\n    });\n\n\n    /*\n     * Nested Content\n     */\n    test(\"(nested content) - it sets value to selected object in single selection mode\", function() {\n      expect(4);\n\n      this.append();\n\n      component.set(\'content\', categorizedIngredients);\n\n      // open options by clicking on the element\n      click(\'.select2-choice\');\n      // then select a nested option\n      click(\'.select2-results li:nth-child(2) ul li:nth-child(3)\', \'body\');\n\n      andThen(function() {\n        strictEqual(component.get(\'value\'), categorizedIngredients[1].children[2], \"selects correct item\");\n        equal($(\'.select2-chosen\').text(), categorizedIngredients[1].children[2].text, \"has correct text\");\n\n        // select another option just to make sure\n        click(\'.select2-choice\');\n        click(\'.select2-results li:nth-child(1) ul li:nth-child(1)\', \'body\');\n\n        andThen(function() {\n          strictEqual(component.get(\'value\'), categorizedIngredients[0].children[0], \"selects correct item\");\n          equal($(\'.select2-chosen\').text(), categorizedIngredients[0].children[0].text, \"has correct text\");\n        });\n      });\n    });\n\n\n    test(\"(nested content) - it sets value to selected object\'s optionValuePath in single selection mode\", function() {\n      expect(4);\n\n      this.append();\n\n      component.set(\'content\', categorizedIngredients);\n      component.set(\'optionValuePath\', \'id\');\n\n      // open options by clicking on the element\n      click(\'.select2-choice\');\n      // then select a nested option\n      click(\'.select2-results li:nth-child(2) ul li:nth-child(3)\', \'body\');\n\n      andThen(function() {\n        strictEqual(component.get(\'value\'), categorizedIngredients[1].children[2].id, \"selects correct item\");\n        equal($(\'.select2-chosen\').text(), categorizedIngredients[1].children[2].text, \"has correct text\");\n\n        // select another option just to make sure\n        click(\'.select2-choice\');\n        click(\'.select2-results li:nth-child(1) ul li:nth-child(1)\', \'body\');\n\n        andThen(function() {\n          strictEqual(component.get(\'value\'), categorizedIngredients[0].children[0].id, \"selects correct item\");\n          equal($(\'.select2-chosen\').text(), categorizedIngredients[0].children[0].text, \"has correct text\");\n        });\n      });\n    });\n\n\n    test(\"(nested content) - it sets value to array of selected objects in multiple selection mode\", function() {\n      expect(7);\n\n      component.set(\'multiple\', true);\n\n      this.append();\n\n      component.set(\'content\', categorizedIngredients);\n\n      equal($(\'.select2-choices\').text().trim(), \'\', \"has empty selection text on start\");\n\n      // select an option after opening the dropdown\n      click(\'.select2-choices\');\n      click(\'.select2-results li:nth-child(2) ul li:nth-child(3)\', \'body\');\n\n      andThen(function() {\n        deepEqual(component.get(\'value\'), [categorizedIngredients[1].children[2]], \"has correct value\");\n        equal($(\'.select2-choices\').text().replace(/ /g, \'\'), categorizedIngredients[1].children[2].text, \"displays correct text\");\n\n        // select another item\n        click(\'.select2-choices\');\n        click(\'.select2-results li:nth-child(1) ul li:nth-child(1)\', \'body\');\n\n        andThen(function() {\n          deepEqual(component.get(\'value\'), [categorizedIngredients[1].children[2], categorizedIngredients[0].children[0]], \"has correct value\");\n          equal($(\'.select2-choices\').text().replace(/ /g, \'\'), categorizedIngredients[1].children[2].text + categorizedIngredients[0].children[0].text, \"displays correct text\");\n\n          // remove the first item again\n          click(\'.select2-search-choice:nth-child(1) .select2-search-choice-close\');\n\n          andThen(function() {\n            deepEqual(component.get(\'value\'), [categorizedIngredients[0].children[0]], \"has correct value\");\n            equal($(\'.select2-choices\').text().replace(/ /g, \'\'), categorizedIngredients[0].children[0].text, \"displays correct text\");\n          });\n        });\n      });\n    });\n\n\n    test(\"(nested content) - it sets value to array of selected objects\' optionValuePaths in multiple selection mode\", function() {\n      expect(7);\n\n      component.set(\'multiple\', true);\n\n      this.append();\n\n      component.set(\'content\', categorizedIngredients);\n      component.set(\'optionValuePath\', \'id\');\n\n      equal($(\'.select2-choices\').text().trim(), \'\', \"has empty selection text on start\");\n\n      // select an option after opening the dropdown\n      click(\'.select2-choices\');\n      click(\'.select2-results li:nth-child(2) ul li:nth-child(3)\', \'body\');\n\n      andThen(function() {\n        deepEqual(component.get(\'value\'), [categorizedIngredients[1].children[2].id], \"has correct value\");\n        equal($(\'.select2-choices\').text().replace(/ /g, \'\'), categorizedIngredients[1].children[2].text, \"displays correct text\");\n\n        // select another item\n        click(\'.select2-choices\');\n        click(\'.select2-results li:nth-child(1) ul li:nth-child(1)\', \'body\');\n\n        andThen(function() {\n          deepEqual(component.get(\'value\'), [categorizedIngredients[1].children[2].id, categorizedIngredients[0].children[0].id], \"has correct value\");\n          equal($(\'.select2-choices\').text().replace(/ /g, \'\'), categorizedIngredients[1].children[2].text + categorizedIngredients[0].children[0].text, \"displays correct text\");\n\n          // remove the first item again\n          click(\'.select2-search-choice:nth-child(1) .select2-search-choice-close\');\n\n          andThen(function() {\n            deepEqual(component.get(\'value\'), [categorizedIngredients[0].children[0].id], \"has correct value\");\n            equal($(\'.select2-choices\').text().replace(/ /g, \'\'), categorizedIngredients[0].children[0].text, \"displays correct text\");\n          });\n        });\n      });\n    });\n\n\n    test(\"it uses optionLabelPath\", function() {\n      expect(2);\n      var component = this.subject({});\n\n      component.set(\'optionLabelPath\', \'name\');\n      component.set(\'content\', ingredients);\n\n      this.append();\n\n      click(\'.select2-choice\');\n      click(\'.select2-results li:nth-child(2)\', \'body\');\n\n      andThen(function() {\n        strictEqual(component.get(\'value\'), ingredients[1], \"selects correct item\");\n        equal($(\'.select2-chosen\').text(), ingredients[1].name, \"has correct text\");\n      });\n    });\n\n\n    test(\"it uses optionDescriptionPath\", function() {\n      expect(1);\n\n      var component = this.subject({});\n\n      component.set(\'optionLabelPath\', \'name\');\n      component.set(\'optionDescriptionPath\', \'subtext\');\n      component.set(\'content\', ingredients);\n\n      this.append();\n\n      // open options by clicking on the element\n      click(\'.select2-choice\');\n\n      andThen(function() {\n        var expected = ingredients.map(function(ingredient) {\n          // jQuery .text() will have space between name and subtext, but thats ok\n          return ingredient.name + \' \' + ingredient.subtext;\n        }).join(\'\');\n        equal($(\'.select2-results li\').text(), expected, \"display correct text\");\n      });\n    });\n\n    test(\"it is disabled when `enabled=false`\", function() {\n      expect(3);\n\n      this.append();\n\n      component.set(\'content\', simpleContent);\n\n      ok(!$(\'.select2-container\').hasClass(\'select2-container-disabled\'), \"is enabled\");\n\n      component.set(\'enabled\', false);\n\n      ok($(\'.select2-container\').hasClass(\'select2-container-disabled\'), \"is disabled\");\n\n      component.set(\'enabled\', true);\n\n      ok(!$(\'.select2-container\').hasClass(\'select2-container-disabled\'), \"is enabled\");\n    });\n\n\n    test(\"(ember-data) - displays items from DS.RecordArray\", function() {\n      expect(4);\n\n      this.append();\n\n      // warp content in DS.RecordArray\n      var simpleContentRecordArray = DS.RecordArray.create({\n        content: simpleContent\n      });\n\n      component.set(\'content\', simpleContentRecordArray);\n      component.set(\'optionValuePath\', \'id\');\n\n      // open options by clicking on the element\n      click(\'.select2-choice\');\n      // then select an option\n      click(\'.select2-results li:nth-child(3)\', \'body\');\n\n      andThen(function() {\n        strictEqual(component.get(\'value\'), simpleContent[2].id, \"selects correct item\");\n        equal($(\'.select2-chosen\').text(), simpleContent[2].text, \"has correct text\");\n\n        // select another option just to make sure\n        click(\'.select2-choice\');\n        click(\'.select2-results li:nth-child(1)\', \'body\');\n\n        andThen(function() {\n          strictEqual(component.get(\'value\'), simpleContent[0].id, \"selects correct item\");\n          equal($(\'.select2-chosen\').text(), simpleContent[0].text, \"has correct text\");\n        });\n      });\n    });\n\n    test(\"(ember-data) - displays items from DS.PromiseArray\", function() {\n      expect(2);\n\n      this.append();\n\n      // warp content in DS.RecordArray\n      var simpleContentPromiseArray = DS.PromiseArray.create({\n        promise: Ember.RSVP.resolve(simpleContent)\n      });\n\n      component.set(\'content\', simpleContentPromiseArray);\n\n      // wait until Promise is resolved\n      simpleContentPromiseArray.then(function() {\n        // open options by clicking on the element\n        click(\'.select2-choice\');\n\n        andThen(function() {\n          equal($(\'.select2-results li\').length, simpleContent.length, \"has correct options length\");\n          equal($(\'.select2-results li\').text(), simpleContent.getEach(\'text\').join(\'\'), \"display correct text\");\n        });\n      });\n    });\n\n    test(\"(ember-data) - is disabled until DS.PromiseArray\'s promise is resolved\", function() {\n      expect(2);\n\n      var deferred = Ember.Deferred.create();\n\n      // warp content in DS.RecordArray\n      var simpleContentPromiseArray = DS.PromiseArray.create({\n        promise: deferred\n      });\n\n      component.set(\'content\', simpleContentPromiseArray);\n      \n      this.append();\n      \n      ok($(\'.select2-container\').hasClass(\'select2-container-disabled\'), \"is disabled\");\n\n      deferred.resolve(simpleContent);\n\n      // wait until Promise is resolved\n      simpleContentPromiseArray.then(function() {\n        ok(!$(\'.select2-container\').hasClass(\'select2-container-disabled\'), \"is enabled\");\n      });\n    });\n\n    test(\"(ember-data) - stays disabled after DS.PromiseArray\'s promise is rejected\", function() {\n      expect(2);\n\n      var deferred = Ember.Deferred.create(),\n          errorText = \"some error description\";\n\n      // warp content in DS.RecordArray\n      var simpleContentPromiseArray = DS.PromiseArray.create({\n        promise: deferred\n      });\n\n      component.set(\'content\', simpleContentPromiseArray);\n      \n      this.append();\n      \n      ok($(\'.select2-container\').hasClass(\'select2-container-disabled\'), \"is disabled\");\n\n      deferred.reject(new Error(errorText));\n\n      // wait until Promise is rejected\n      simpleContentPromiseArray.then(null, function() {\n        ok($(\'.select2-container\').hasClass(\'select2-container-disabled\'), \"is disabled\");\n      });\n    });\n  });//# sourceURL=dummy/tests/unit/components/select-2-test.js");

/* jshint ignore:start */

define('dummy/config/environment', ['ember'], function(Ember) {
  var metaName = 'dummy/config/environment';
  var rawConfig = Ember['default'].$('meta[name="' + metaName + '"]').attr('content');
  var config = JSON.parse(unescape(rawConfig));

  return { 'default': config };
});

if (runningTests) {
  require('dummy/tests/test-helper');
} else {
  require('dummy/app')['default'].create({});
}

/* jshint ignore:end */
